doctype html
head
    meta(charset='utf-8')
    title Nutriv API - Documentation
    meta(name='description' content='')
    meta(http-equiv='cleartype' content='on')
    meta(http-equiv='X-UA-Compatible' content='IE=edge,chrome=1')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    link(rel='stylesheet' href='css/hightlightjs-dark.css')
    link(rel='stylesheet' href='css/docs.css')
    link(rel='apple-touch-icon' href='/img/apple.png')
    link(rel='icon' href='/img/favicon.png')
    link(rel='manifest' href='/manifest.webmanifest')
    script.
        hljs.initHighlightingOnLoad();
.left-menu
    .content-logo
        .logo
            img(alt='platform by Emily van den Heever from the Noun Project' title='platform by Emily van den Heever from the Noun Project' src='/img/favicon.png' height='32')
            span API Documentation
        button#button-menu-mobile.burger-menu-icon
            svg(width='34' height='34' viewbox='0 0 100 100')
                path.line.line1(d='M 20,29.000046 H 80.000231 C 80.000231,29.000046 94.498839,28.817352 94.532987,66.711331 94.543142,77.980673 90.966081,81.670246 85.259173,81.668997 79.552261,81.667751 75.000211,74.999942 75.000211,74.999942 L 25.000021,25.000058')
                path.line.line2(d='M 20,50 H 80')
                path.line.line3(d='M 20,70.999954 H 80.000231 C 80.000231,70.999954 94.498839,71.182648 94.532987,33.288669 94.543142,22.019327 90.966081,18.329754 85.259173,18.331003 79.552261,18.332249 75.000211,25.000058 75.000211,25.000058 L 25.000021,74.999942')
    .mobile-menu-closer
    .content-menu
        .content-infos
            .info
                b Version:
                |  1.0.0
            // <div class="info"><b>Last Updated:</b> 15th Sep, 2021</div>
        ul
            li.scroll-to-link.active(data-target='content-get-started')
                a GET STARTED
            li.scroll-to-link(data-target='content-get-characters')
                a Dishes
            li.scroll-to-link(data-target='content-get-users')
                a Users
            li.scroll-to-link(data-target='content-get-auth')
                a Authentication
            li.scroll-to-link(data-target='content-get-bookings')
                a Bookings
            li.scroll-to-link(data-target='content-get-reviews')
                a Reviews
            li.scroll-to-link(data-target='content-errors')
                a Codes
.content-page
    .content-code
    .content
        #content-get-started.overflow-hidden.content-section
            h1 Get started
            pre.
                API Endpoint

                https://{host}/api/v1

            p
                | The Nutriv API contains endpoints for Dishes, Users, Reviews, Bookings and Authentication.
        #content-get-characters.overflow-hidden.content-section
            h2 Get dishes
            <pre><code class="bash">curl --location -g --request GET '{host}/api/v1/menu/</code></pre>

            p
                | To get characters you need to make a GET call to the following url
                | :
                br
                code.higlighted.break-word {host}/api/v1/menu/
            br
            h4 QUERY PARAMETERS
            table.central-overflow-x
                thead
                    tr
                        th Field
                        th Type
                        th Description
                tbody
                    tr
                        td name
                        td String
                        td (optional) Find the dishes by the name.
                    tr
                        td price
                        td Number
                        td (optional) Sort, Find the results by the price.
                    tr
                        td ratingsAverage
                        td Number
                        td
                            | (optional) Sort, Find the dishes by the Ratings of each dish.
                    tr
                        td rarity
                        td String
                        td (optional) Find dishes by the rarity.
                    tr
                        td foodType
                        td String
                        td (optional) Find dishes by the type of the food.
                    tr
                        td priceDiscount
                        td Number
                        td
                            | (optional) Find, Sort dishes on the basis of the discount
                            | price.
                    tr
                        td deliveryTime
                        td Number
                        td
                            | (optional) Find, Sort dishes on the basis of the delivery
                            | time.
                    tr
                        td ratingsQuantity
                        td Number
                        td
                            | (optional) Find, Sort dishes on the basis of the number of
                            | people who rated a particular dish.
        // Get particular dish
        #content-get-characters.overflow-hidden.content-section
            h2 Get Dish
            <pre><code class="bash">curl --location -g --request GET '{host}/api/v1/menu/id'</code></pre>

            p
                | To get a particular dish you need to make a GET call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/menu/id
            br
            h4 QUERY PARAMETERS
            table.central-overflow-x
                thead
                    tr
                        th Field
                        th Type
                        th Description
                tbody
                    tr
                        td id
                        td Unique Identity
                        td
                            | ID of the particular dish. The result will be the dish which
                            | has the ID passed in the URL.
        // Add new dish
        #content-get-characters.overflow-hidden.content-section
            h2 Add new Dish
            pre.
                curl --location -g --request POST '{host}/api/v1/menu' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "name": "Name",
                    "price": `price`,
                    "rarity": "Available / Not Available",
                    "foodType": "Vegetarian / Non Vegetarian.",
                    "summary": "Dish Summary.",
                    "description": "Description of the dish.",
                    "availableIn": [ locations ],
                    "chefs": [chef id] 
                    },'

            p
                | To get a particular dish you need to make a POST call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/menu
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td {{token}}
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
            h4 Body
            p
                | {
                br
                |             &quot;name&quot;: &quot;Name&quot;,
                br
                |             &quot;price&quot;: &grave;price&grave;,
                br
                |             &quot;rarity&quot;: &quot;Available / Not Available&quot;,
                br
                |             &quot;foodType&quot;: &quot;Vegetarian / Non Vegetarian.&quot;,
                br
                |             &quot;summary&quot;: &quot;Dish Summary.&quot;,
                br
                |             &quot;description&quot;: &quot;Description of the dish.&quot;,
                br
                |             &quot;availableIn&quot;: [ locations ],
                br
                |             &quot;chefs&quot;: [chef id] 
                br
                | },
        // Update dish
        #content-get-characters.overflow-hidden.content-section
            h2 Update Dish
            pre.
                curl --location -g --request PATCH '{host}/api/v1/menu/id' \
                --header 'Content-Type: application/json' \
                --form 'imageCover=@"/path/to/file"' \
                --form 'images=@"/path/to/file"' \
                --form 'images=@"/path/to/file"' \
                --form 'images=@"/path/to/file"' \
                --form 'price="500"'

            p
                | To update a particular dish you need to make a PATCH call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/menu/id
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td {{token}}
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
            h4 Body
            p
                | The data which is to be updated like:
                br
                |             {
                br
                |             price:500
                br
                |             }
        // Delete Dish
        #content-get-characters.overflow-hidden.content-section
            h2 Delete Dish
            pre.
                curl --location -g --request DELETE '{host}/api/v1/menu/id'


            p
                | To get a particular dish you need to make a DELETE call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/menu/id
            br
            h4 QUERY PARAMETERS
            table.central-overflow-x
                thead
                    tr
                        th Field
                        th Type
                        th Description
                tbody
                    tr
                        td id
                        td Unique Identity
                        td
                            | ID of the particular dish to be delete. The dish which
                            | contains the ID specified will be deleted.
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td {{token}}
        // Get top 5 cheap dishes
        #content-get-characters.overflow-hidden.content-section
            h2 Get TOP 5 cheap dishes
            pre.
                curl --location -g --request GET '{host}/api/v1/menu/top-5-cheap'

            p
                | To get a particular dish you need to make a DELETE call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/menu/top-5-cheap
            br
        #content-get-characters.overflow-hidden.content-section
            h2 Get Distances to Hotels From Point
            pre.
                curl --location -g --request GET '{{host}}api/v1/menu/distances/34.111745,-118.113491/unit/km'

            p
                | To get hotels near you, make a GET call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/tours/distances/34.111745,-118.113491/unit/km
            br
        //- Users!!!!!!--------------------------------------------
        #content-get-users.overflow-hidden.content-section
            h2 Get All Users
            <pre><code class="bash">curl --location -g --request GET '{host}api/v1/users?role=user'/code></pre>

            p
                | To get users you need to make a GET call to the following url
                | :
                br
                code.higlighted.break-word {host}api/v1/users?role=user
            br
            h4 QUERY PARAMETERS
            table.central-overflow-x
                thead
                    tr
                        th Field
                        th Type
                        th Description
                tbody
                    tr
                        td role
                        td String
                        td (optional) Find the dishes by role (user, chef, admin).
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity
        // Get particular dish
        #content-get-users.overflow-hidden.content-section
            h2 Get User
            <pre><code class="bash">curl --location -g --request GET '{host}/api/v1/users/userId'</code></pre>

            p
                | To get a particular user you need to make a GET call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/users/userId
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity
        // Add new dish
        #content-get-users.overflow-hidden.content-section
            h2 Update User
            pre.
                curl --location -g --request PATCH '{{URL}}api/v1/users/5c8a23c82f8fb814b56fa18d' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "role": "user"
                }'

            p
                | To update a particular user you need to make a PATCH call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/users/userId
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td {{token}}
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
                        h4 Body
            p
                | The data which is to be updated like:
                br
                |             {
                br
                |             role:chef
                br
                |             }

        // Get current user
        #content-get-users.overflow-hidden.content-section
            h2 Get current User
            pre curl --location -g --request GET '{host}api/v1/me'

            p
                | To get the current logged in user you need to make a GET call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/me
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td {{token}}
        // Update Current User
        #content-get-users.overflow-hidden.content-section
            h2 Update Current User
            pre.
                curl --location -g --request PATCH '{host}/api/v1/updateMe'
            p
                | To update the currently logged in user you need to make a PATCH call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/updateMe
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td {{token}}
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
            h4 Body
            p.
                {
                    "name": "Example",
                    "role": "chef"
                }

        // Delete current user
        #content-get-users.overflow-hidden.content-section
            h2 Delete current user
            pre.
                curl --location -g --request GET '{host}/api/v1/deleteMe'

            p
                | To delete the currently logged in user you need to make a DELETE call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/deleteMe
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity
            br
        //- Auth!!!!!!--------------------------------------------
        #content-get-auth.overflow-hidden.content-section
            h2 Sign Up
            pre.
                curl --location -g --request POST '{host}/api/v1/users/signup' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "name": "NEW HACKER",
                    "email": "newhacker@hacker.com",
                    "password": "pass1234",
                    "passwordConfirm": "pass1234",
                    "role": "admin"
                }'

            p
                | To signup you need to make a POST call to the following url
                | :
                br
                code.higlighted.break-word {host}api/v1/users/signup
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity
            h4 Body
            p.
                {
                    "name": "NEW HACKER",
                    "email": "newhacker@hacker.com",
                    "password": "pass1234",
                    "passwordConfirm": "pass1234",
                    "role": "admin"
                }

        // Login
        #content-get-auth.overflow-hidden.content-section
            h2 Login
            pre.
                curl --location -g --request POST '{host}api/v1/users/login' \
                --header 'Content-Type: application/x-www-form-urlencoded' \
                --data-urlencode 'email=admin@natours.io' \
                --data-urlencode 'password=ksQu6wV8-69ebDy.pwH'

            p
                | To login you need to make a POST call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/users/login
            br
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/x-www-form-urlencoded
                        h4 Body
        // Forgot Password
        #content-get-auth.overflow-hidden.content-section
            h2 Forgot Password
            pre.
                curl --location -g --request POST '{host}api/v1/users/forgotPassword' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "email": "test3@example.com"
                }'

            p
                | To get email token for password you need to make a POST call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/users/forgotPassword
            br
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
            h4 Body
            p
                | The data which is to be updated like:
                br
                |             {
                br
                |             "email":"test@example.com"
                br
                |             }

        // Reset Password
        #content-get-auth.overflow-hidden.content-section
            h2 Reset Password
            pre.
                    curl --location -g --request PATCH '{{URL}}api/v1/users/resetPassword/1652bfc347b939d3d19cea352d231d6dbe6dfef0884e68e6c61629019c44b9ca' \
                    --header 'Content-Type: application/json' \
                    --data-raw '{
                        "password": "newpassword",
                        "passwordConfirm": "newpassword"
                    }'

            p
                | To get the current logged in user you need to make a GET call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/users/resetPassword/token
            br
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
            h4 Body
            p
                | The data which is to be updated like:
                br
                |             {
                br
                |             "password":"newPass"
                |             "passwordConfirm":"passwordConfirm"
                br
                |             }

        // Update current user password
        #content-get-auth.overflow-hidden.content-section
            h2 Update current user password
            pre.
                curl --location -g --request PATCH '{{URL}}api/v1/users/updateMyPassword' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "passwordCurrent": "pass1234",
                    "password": "newpassword",
                    "passwordConfirm": "newpassword"
                }'
            p
                | To update the currently logged in user password you need to make a POST call to the
                | following url :
                br
                code.higlighted.break-word {host}/api/v1/users/updateMyPassword
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td {{token}}
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
            h4 Body
            p.
            p
                | The data which is to be updated like:
                br
                |             {
                br
                |             "passwordCurrent":"currentPassword"
                |             "password":"newPass"
                |             "passwordConfirm":"newPass"
                br
                |             }
        #content-get-bookings.overflow-hidden.content-section
            h2 Get All Bookings
            pre.
                curl --location -g --request GET '{host}/api/v1/bookings'

            p To get all bookings you need to make a GET request to:
                br
                code.higlighted.break-word {host}/api/v1/bookings

            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity

        // Get Booking
        #content-get-bookings.overflow-hidden.content-section
            h2 Get Booking
            pre.
                curl --location -g --request GET '{host}/api/v1/bookings/{user_id}}'

            p To get a specific booking you need to make a GET request to:
                br
                code.higlighted.break-word {host}/api/v1/users/login
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity
        #content-get-reviews.overflow-hidden.content-section
            h2 Get All Reviews
            pre.
                curl --location -g --request GET '{host}/api/v1/reviews'

            p To get all reviews you need to make a GET request to:
                br
                code.higlighted.break-word {host}/api/v1/reviews

            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity

        // Get Review
        #content-get-reviews.overflow-hidden.content-section
            h2 Get Review
            pre.
                curl --location -g --request GET '{host}/api/v1/reviews/{user_id}'

            p To get a specific booking you need to make a GET request to:
                br
                code.higlighted.break-word {host}/api/v1/reviews/{user_id}
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity
        // Create new review
        #content-get-reviews.overflow-hidden.content-section
            h2 Create new review
            pre.
                curl --location -g --request POST '{host}/api/v1/reviews' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "review": "Loved it",
                    "rating": 4,
                    "dish": "5c88fa8cf4afda39709c2951",
                    "user": "user_id"
                }'

            p To add new review you need to make a POST request to the following URL:
                br
                code.higlighted.break-word {host}/api/v1/reviews
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
            h4 Body
            p.
                {
                    "review": "Loved it",
                    "rating": 4,
                    "dish": "5c88fa8cf4afda39709c2951",
                    "user": "5cd14baa326b861fab416f56"
                }
        // Update review
        #content-get-reviews.overflow-hidden.content-section
            h2 Update review
            pre.
                curl --location -g --request PATCH '{host}/api/v1/reviews/{review_id}' \
                --header 'Content-Type: application/json' \
                --data-raw '{
                    "rating": 5
                }'

            p To update review you need to make a PATCH request to the following URL:
                br
                code.higlighted.break-word {host}/api/v1/reviews/{review_id}
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity
            h4 Headers
            table.central-overflow-x
                thead
                    tr
                        th Content-Type
                tbody
                    tr
                        td application/json
            h4 Body
            p.
                {
                    "rating": 5
                }
        // Delete review
        #content-get-reviews.overflow-hidden.content-section
            h2 Delete review
            pre.
                curl --location -g --request DELETE '{host}/api/v1/reviews/{review_id}}'

            p To delete a review you need to make a DELETE request to the following URL:
                br
                code.higlighted.break-word {host}/api/v1/reviews/{review_id}
            br
            h4 Authentication
            table.central-overflow-x
                thead
                    tr
                        th Type
                        th Token
                tbody
                    tr
                        td Bearer Token / Cookie
                        td Unique Identity


        #content-errors.overflow-hidden.content-section
            h2 Errors
            p The Nutriv API uses the following codes:
            table
                thead
                    tr
                        th Code
                        th Meaning
                tbody
                    tr
                        td 200
                        td Request successfully completed. There aren't any errors.
                    tr
                        td 201
                        td Requested entries successfully added.
                    tr
                        td 403
                        td Authentication invalid. Try logging in again!
                    tr
                        td 404
                        td Request not found due some error in the URL.
    .content-code
script(src='js/docs.js')
